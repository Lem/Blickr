#!/usr/bin/perl
use Flickr::API2;
use Flickr::Upload;
use Config::Simple;
use Data::Dumper;
use Getopt::Std;
use LWP::Simple;
use File::Basename;
use POSIX qw(strftime);
use MIME::Base64;
use Archive::Tar;

$Getopt::Std::STANDARD_HELP_VERSION = 1;
getopts('lhcd:g:');

my $pixel = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAAAAAA6fptVAAAAAXNSR0IArs4c6QAAAApJREFUCNdjYAAAAAIAAeIhvDMAAAAASUVORK5CYII=";

my $config_file = $ENV{"HOME"}."/.blickr";

&read_config;
my $ua = Flickr::Upload->new({'key' => $key, 'secret' => $secret });
my $tar = Archive::Tar->new;

if ($opt_l) {
	# list DB

	$counter = 1;
	foreach $key ( keys %{$cfg->param(-block=>'db')} ){
		$row = $cfg->param(-block=>'db')->{$key};
		print "$counter:\tID:$key\tFile: $row->[0]\tDate: $row->[1]\n";
		$counter++;
	}

} elsif ($opt_c) {
	# change config

	&new_config;

} elsif ($opt_d) {
	# delete image

	# To match list-ID and element we need to substract one
	$id = (keys %{$cfg->param(-block=>'db')})[$opt_d-1];
	$res = $ua->execute_method("flickr.photos.delete", { auth_token => $token, photo_id => $id });
	
	if ($res->{error_message} == '') {
		print "Photo with ID $id removed\n";
		$cfg->delete("db.$id");
		$cfg->write($config_file);
	} else {
		print "Got an error :(\n".$res->{error_message}."\n";
	}	

} elsif ($opt_h) {
	&HELP_MESSAGE;

} elsif ($opt_g) {
	# Get a picture

	# Resolve ID
	$id = (keys %{$cfg->param(-block=>'db')})[$opt_g-1];
	$url = &get_url($id);

	# Download File
	getstore($url, 'dummy.data');

	$binwalk = `binwalk dummy.data`;

	# We need the decimal offset of out file
	if ($binwalk =~ /.*\n(\d+)\s*0x[a-f0-9]+.*tar.*\n/i) {
		$offset = $1;
	} else {
		die "No tar!\n";
	}

	# Read file from offset
	open IN, "< dummy.data";
	seek(IN, $offset, 0);
	local $/;
	my $content = <IN>;
	close IN;

	# Write our restored archive
	open OUT, "> dummy.tar";
	print OUT $content;
	close OUT;

	# Extract our real file :D
	$tar->read('dummy.tar');
	$tar->extract();

	# Remove unnecessary files
	unlink('dummy.data', 'dummy.tar');
	
} else {
	
	# Do we have ARGV?
	if (!$ARGV[0]) {
		print "Please give me a file :(\n";
		exit(1);
	}

	# Is file a file?
	if (!-f $ARGV[0]) {
		print "That's not a file :(!\n";
		exit(1);
	}

	# If no auth_token generate one.
	if (!$token) {

		$frobres = $ua->execute_method("flickr.auth.getFrob");
		do { print "Can't get Frob: \n".Dumper($frobres); exit(1); }  if not defined $frobres->{success}; 
		$frob = $frobres->{tree}->{children}->[1]->{children}->[0]->{content};

		print "Please use following URL to generate a token:\n";
		print $ua->request_auth_url('delete', $frob)."\n";
		print "After authorizing, press enter";
		<STDIN>;

		$tokenres = $ua->execute_method("flickr.auth.getToken",{ 'frob' => $frob , 'perms' => 'delete'} );
		do { print "Got problem while request token :\n".Dumper($tokenres); exit(1); }if not defined $tokenres and $tokenres->{success};
		$token = $tokenres->{tree}->{children}->[1]->{children}->[1]->{children}->[0]->{content}; 

		# Save token :D
		$cfg->param('token', $token);
		$cfg->write($config_file);
	}


	$up_file = &append($ARGV[0]); # Append file to $pixel
	
	&check_size($up_file);

	# Finaly! Upload!
	$id = $ua->upload(
		'photo' => $up_file,
		'auth_token' => $token,
		'is_public' => 1,
		'is_friend' => 0,
		'is_family' => 0
	) or die "Failed to upload $ARGV[0]";

	unlink($up_file);

	$cfg->param("db.$id", [basename($ARGV[0]), strftime "%m_%d_%Y_-_%H_%M_%S", localtime ]);
	$cfg->write($config_file);
}

sub append($) {
	my $file = shift;
	my $new = int(rand(9999))+90000 .".png";

	# Write default 1x1 png 
	open OUT, "> tmp.png" or die $!;
	print OUT decode_base64($pixel) or die $!;
	close OUT;

	$tar->add_files($file);
	$tar->write('bla.tar');

	# Much faster than handling via perl
	`cat tmp.png bla.tar > $new`;

	unlink('bla.tar','tmp.png');

	return $new;
}

sub check_size($) {
	my $file = shift;

        # File to large. Flickr allows 200MB/photo
        if ((-s $file) >= 209715200) {
                print "Sorry, Flickr allows only 200MB\n";
                unlink($file);
                exit(1);
        }

	# Filesize greater than 150MB?
	if ((-s $file) >= 157286400) {
		print "What a big file! Upload could result in a laggy system. Continue? [y/n]\n";
		chomp($input = <STDIN>);
		if ($input =~ /^[y]$/i) {
			return;
		} else {
			unlink($file);
			exit;
		}
	}
}

sub read_config () {
	if (!-e $config_file) {
		# No config? Ask me!
		&new_config;
	} else {
		$cfg = new Config::Simple($config_file);
		$key = $cfg->param('key');
		$secret = $cfg->param('secret');

		if ($cfg->param('token')) {
			$token = $cfg->param('token');
		}
	}
}

# Read values need for config
sub new_config() {
	print "You need a new config. So I will ask you some questions.\n";
	print "Your API-Key?\n";
	chomp($key = <STDIN>);
	print "Your secret?\n";
	chomp($secret = <STDIN>);

	# Read old config for not remove entries in [db]-section
	if (-f $config_file) {
		$cfg = new Config::Simple($config_file);
		$cfg->delete('token');
	} else {
		$cfg = new Config::Simple(syntax=>'ini');
	}

	# Writing config into file
	$cfg->param('key', $key);
	$cfg->param('secret', $secret);
	$cfg->param(-block=>'db');
	$cfg->write($config_file);
}

sub get_url($) {
	$id = shift;

	# Get infos
	$res = $ua->execute_method("flickr.photos.getInfo", { auth_token => $token, photo_id => $id });
	
	# Extract needed values
	$server = $res->{tree}->{children}->[1]->{attributes}->{server};
	$farm = $res->{tree}->{children}->[1]->{attributes}->{farm};
	$secret = $res->{tree}->{children}->[1]->{attributes}->{originalsecret};
	$ext = $res->{tree}->{children}->[1]->{attributes}->{originalformat};
	
	# Return original-URL
	return "http://farm$farm.staticflickr.com/$server/$id\_$secret\_o.$ext";
}

sub HELP_MESSAGE() {
	print <<EOF;
Blickr - Backup files to Flickr.

No option means: Upload file!

-l	List your uploaded files
-d	Delete one of your files online
-c	Modive a config-value
-g	Download file
EOF

	exit(0);
}
