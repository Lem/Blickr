#!/usr/bin/env ruby
$LOAD_PATH << './flickraw_mod/lib'
require 'pp'
require 'flickraw'
require 'net/http'
require 'yaml'
require 'optparse'
require 'base64'
require 'gpgme'
require 'archive/tar/minitar'
include Archive::Tar

$config_file = ENV['HOME'] + "/.blickr"
$smallgif = "R0lGODlhAQABAIABAP///wAAACwAAAAAAQABAAACAkQBADs="

# Parse options
def parse_opt(arg)
	options = {}

	parser = OptionParser.new do |opts| 
		opts.on('-h', '--help', "Da help") do 
			options['help'] = true
		end

		opts.on('-l', '--list', "List local DB") do 
			options['list'] = true
		end

		opts.on('-g ID', '--get ID', Integer, "Download ID") do |id|
			options['get'] = id
		end

		opts.on('-d ID', '--delete ID', Integer, "Delete ID on Flickr") do |id|
			options['del'] = id
		end

		opts.on('-m', '--meassure', "Test Uploadspeet for difference in time") do 
			options['meassure'] = true
		end

		opts.on('-e', '--encrypt', "I want to encrypt!!1")  do |recipient|
			options['gpg'] = true
		end
	end

	begin
		parser.parse!(arg)
	rescue OptionParser::InvalidOption
		puts "Woot? I don't know that option..."
		exit
	end
	options
end

# Parse initfile
def parse_init
	if File.exist? $config_file
		if File.readable? $config_file
			ini = begin
				YAML.load(File.open($config_file))
			rescue ArgumentError => e
				puts "Could not parse config: #{e.message}"
			end
			return ini
		else
			puts "Can not read file"
		end
	else
		return get_access
	end
end

# Get access with oauth and write config
def get_access
	puts "You have no config. Please answer some questions."
	puts "What is your API-Key?"
	FlickRaw.api_key = gets.strip
	puts "What is the secret?"
	FlickRaw.shared_secret = gets.strip

	token = flickr.get_request_token
	auth_url = flickr.get_authorize_url(token['oauth_token'], :perms => 'delete')

	puts "Visit #{auth_url} and enter the result:"
	result = gets.strip

	begin
		flickr.get_access_token(token['oauth_token'], token['oauth_token_secret'], result)
		login = flickr.test.login
		puts "You are now authenticated as #{login.username} with token #{flickr.access_token} and secret #{flickr.access_secret}"
	rescue FlickRaw::FailedResponse => e
		puts "Authentication failed : #{e.msg}"
	end

	# Write to config 
	ini = {'flickr' => { 'api_key' => FlickRaw.api_key, 'shared_secret' => FlickRaw.shared_secret, 'access_token' => flickr.access_token, 'access_secret' => flickr.access_secret } }
	
	File.open($config_file, "w") {|f| f.write(ini.to_yaml) }

	return ini	
end

def check_recipient(ini)
	recipient = ini['flickr']['gpg']
	
	if recipient.nil?
		puts "No privaty key defined. Please enter your matching email:"
		input = STDIN.gets.strip
		ini['flickr'].store( 'gpg', input )
		recipient = input

		File.open($config_file, "w") {|f| f.write(ini.to_yaml) }
	end

	keys = GPGME::Key.find(:secret, recipient )

	keys.each do |key|
		# Key expired?
	        if key.expired
			puts "Your key seems to be expired. Aborting"
			exit
		end
	end

	# There is no private key?
	if keys.length == 0
		puts "Oh my. Recipient should be you. Or don't you want to decrypt your files?"
		exit
	end
end

ini = parse_init
#FlickRaw.api_key, FlickRaw.shared_secret, flickr.access_token, flickr.access_secret
opt = parse_opt(ARGV)

FlickRaw.api_key = ini['flickr']['api_key']
FlickRaw.shared_secret = ini['flickr']['shared_secret']
flickr.access_token = ini['flickr']['access_token']
flickr.access_secret = ini['flickr']['access_secret']

if opt['help']
	puts "Todo help"
elsif opt['list']
	if ini.has_key?"db" 
		section = ini['db']

		counter = 0
		section.to_a.each do |e|
			puts "#{counter}:\t#{e[0]}\t#{e[1]}"
			counter += 1
		end
	else
		puts "No entry"
	end
elsif opt['del']
	flickr.photos.delete(:photo_id => ini['db'].to_a[opt['del']][0] )
	ini['db'].delete(ini['db'].to_a[opt['del']][0])
	File.open($config_file, "w") {|f| f.write(ini.to_yaml) }
elsif opt['get']
	id = ini['db'].to_a[opt['get']][0]
	name, time, gpg = ini['db'].to_a[opt['get']][1].split(';')

	file_o = FlickRaw.url_o( flickr.photos.getInfo(:photo_id => id) )

	open("dummy.data", "wb") { |f| f.write(Net::HTTP.get_response(URI.parse(file_o)).body) }

	offset = %x( binwalk dummy.data ).match(/^(\d+)\s+0x\d+\s+.*tar.*$/)[1]

	%x( dd if=dummy.data of=dummy.tar bs=1 skip=#{offset} &> /dev/null )

	Minitar.unpack('dummy.tar', '.')

	# Decrypt if gpg is set
	if gpg.eql?'1'
		begin
		crypto = GPGME::Crypto.new
		crypto.decrypt File.open('dummy.gpg', 'r'), :output => File.open(name, "w+")
		rescue GPGME::Error::DecryptFailed
			puts "Opss. It seems that I can not find a matching private key"
		end

		File.unlink('dummy.gpg')
	end

	File.unlink('dummy.tar')
	File.unlink('dummy.data')
elsif opt['meassure']
	puts "Not implemented yet"
else
	up_file = ARGV[0]
	exit if up_file.nil?

	File.open('small.gif', 'wb') {	|f| f.write(Base64.decode64($smallgif)) }

	# Is a file?
	if File.file?(up_file)
		if opt['gpg']
			check_recipient(ini)
			
			puts "Encrypt file..."
			GPGME::Crypto.new.encrypt File.open(up_file), :recipients => ini['flickr']['gpg'], :output => File.open('dummy.gpg', "w")
			puts "Packing..."
			File.open('dummy.tar', 'wb') { |tar| Minitar.pack('dummy.gpg', tar) }
			is_gpg = '1'
		else
			puts "Packing..."
			File.open('dummy.tar', 'wb') { |tar| Minitar.pack(up_file, tar) }
			is_gpg = '0'
		end

		puts "Append tar to gif..."
		%x( cat small.gif dummy.tar > blickr.gif )

		# Flickr allows 200MB per image
		if File.size?('blickr.gif') > 209715200
			puts "Your file is lager than the 200MB which Flickr allows per image! Aborting."
			exit
		end

		puts "Starting upload. Please wait!"
		id = flickr.upload_photo 'blickr.gif'
	
		# Get filename
		basename = File.basename up_file
		
		# Save information about file
		if ini['db'].is_a?(Hash)
			ini['db'].store( id.to_s, basename + ";" + Time.now.to_i.to_s + ";" + is_gpg )
		else
			ini['db'] = { id.to_s => basename + ";" + Time.now.to_i.to_s + ";" + is_gpg }
		end

		File.open($config_file, "w") {|f| f.write(ini.to_yaml) }
		File.unlink('small.gif')
		File.unlink('dummy.tar')
		File.unlink('blickr.gif')

		File.unlink('dummy.gpg') if File.exists?'dummy.gpg'
	else 
		puts "Not a file, sorry :("
	end
end
